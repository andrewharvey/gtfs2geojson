#!/usr/bin/env node

var os = require("os"),
    fs = require("fs"),
    path = require("path"),
    commandLineArgs = require("command-line-args"),
    commandLineUsage = require("command-line-usage"),
    gtfs2geojson = require('../');

/* command line arguments */
var options = [
    {
        name: 'help',
        alias: 'h',
        type: Boolean,
        defaultValue: false
    },
    {
        name: 'shapes-assume-ordered',
        type: Boolean,
        defaultValue: false,
        description: "If provided shapes.txt is assumed to be ordered by shape_id and shape_pt_sequence as this reduces memory usage and processing time. However since the GTFS spec doesn't mandate this ordering, the default is false."
    },
    {
        name: 'input',
        alias: 'i',
        type: String,
        defaultOption: true,
        typeLabel: '[underline]{path}',
        description: 'Path to directory containing GTFS .txt files. Defaults to current directory.'
    },
    {
        name: 'output',
        alias: 'o',
        type: String,
        typeLabel: '[underline]{path}',
        description: 'Output directory. Defaults to the [bold]{input} directory.'
    }
    ];

/* help page */
var usage = [
    {
        header: 'NAME',
        content: 'gtfs2geojson - Converts GTFS stops.txt and shapes.txt to GeoJSON'
    },
    {
        header: 'SYNOPSIS',
        content: [
            'gtfs2geojson [--shapes-assume-ordered] [--output output_path] [source_path]'
        ]
    },
    {
        header: 'OPTIONS',
        optionList: options
    }
    ];

/* parse arguments */
var args = commandLineArgs(options);

/* if --help print usage and exit */
if (args.help) {
    console.log(commandLineUsage(usage));
    process.exit();
}

/* source directory if provided otherwise use current directory */
var source = args.input || '.';

/* destination if provided otherwise use source directory */
var destination = args.output || source;

/* stops */
var stopsSourcePath = path.join(source, 'stops.txt');
fs.stat(stopsSourcePath, function (err, stat) {
    if (!err) {
        var stops = fs.createReadStream(stopsSourcePath);
        gtfs2geojson.stops(stops, function (geojson) {
            fs.writeFile(path.join(destination, 'stops.geojson'), JSON.stringify(geojson) + os.EOL, function(error) {
                if (error) {
                    console.error('Unable to write stops.geojson');
                    throw error;
                }
            });
        });
    }else{
        console.error('stops.txt not found at ' + stopsSourcePath);
    }
});

/* shapes */
var shapesSourcePath = path.join(source, 'shapes.txt');
fs.stat(shapesSourcePath, function (err, stat) {
    if (!err) {
        var shapes = fs.createReadStream(shapesSourcePath);
        gtfs2geojson.lines(shapes, function (geojson) {
            fs.writeFile(path.join(destination, 'shapes.geojson'), JSON.stringify(geojson) + os.EOL, function(error) {
                if (error) {
                    console.error('Unable to write shapes.geojson');
                    throw error;
                }
            });
        }, args['shapes-assume-ordered']);
    }else{
        console.error('shapes.txt not found at ' + shapesSourcePath);
    }
});
